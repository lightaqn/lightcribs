import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
// import { profiles } from "../../../utils/constants";
import {
  Listing,
  Horizons,
  UserForm,
  RecommendedProfiles,
  GoogleSignIn,
} from "../../../components";

import { cribs, profiles } from "../../../utils/constants";
import { useAuthStore } from "../../../store/authStore";
import { AiFillHome, AiOutlineMenu } from "react-icons/ai";
import { IoMdAdd } from "react-icons/io";
import { ImCancelCircle } from "react-icons/im";
import axios from "axios";
import { BASE_URL } from "../../../utils";
import { IProfile, Crib } from "../../../typings";

interface IProps {
  profile: IProfile;
  profileMade: Crib[];
  profileLiked: Crib[];
}

// { profileDetail }: any
const Profile: NextPage<IProps> = () => {
  const router = useRouter();
  const { id, status } = router.query;
  const [addListing, setAddListing] = useState(false);
  const [toggler, setToggler] = useState(true);
  const [displayProfileCrib, setDisplayProfileCrib] = useState(true);
  // const { profile, profileMade, profileLiked } = profileDetail;
  // const { _id, image, profileName } = profile;
  const { userProfile } = useAuthStore();
  const [cribsList, setCribsList] = useState();

  // useEffect(() => {
  //   if (displayProfileCrib) {
  //     setCribsList(profileMade);
  //   } else {
  //     setCribsList(profileLiked);
  //   }
  // }, [displayProfileCrib, profileMade, profileLiked]);

  return (
    <div className="max-w-full items-center justify-center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="max-w-9xl mx-auto space-y-10">
        <div className="grid md:grid-cols-5 bg-[url('/road.jpg')] w-screen h-screen">
          <div className="w-[50px] xl:w-[450px] border-r-2 border-teal-200 xl:border-0 h-full my-10 m-5 p-5 rounded-2xl shadow-xl transition duration-300 hover:ease-out col-span-1 md:w-[100px] bg-gray-400/30 backdrop-blur-lg md:text-gray-700 items-center justify-center text-2xl">
            <div
              className="mt-4 rounded-full bg-transparent mb-10 hover:scale-110 text-gray-500 cursor-pointer items-center justify-center active:text-teal-500"
              onClick={() => setToggler((prev) => !prev)}
            >
              {toggler ? <ImCancelCircle /> : <AiOutlineMenu />}
            </div>
            {toggler && (
              <div className="flex flex-col items-center justify-center p-3 border-gray-300 xl:py-5 xl:border-b-2">
                <Link href="/">
                  <div className="flex items-center justify-center rounded gap-3 cursor-pointer lg:justify-start font-bold text-teal-500">
                    <p className="text-2xl">
                      <AiFillHome />
                    </p>
                    <span className="hidden xl:block text-xl">HomePage</span>
                  </div>
                </Link>
                <Horizons />
                <div className="cursor-pointer bottom-10">
                  <p className="text-lg font-bold text-gray-400 active:text-red-500">
                    Accounts
                  </p>
                  <p className="text-lg font-bold text-gray-400 active:text-red-500">
                    Settings
                  </p>
                </div>
              </div>
            )}
          </div>

          <div className="md:col-span-4 max-h-full m-5 mb-15 p-5 bg-transparent overflow-hidden">
            <div
              // key={_id}
              className="grid grid-cols-5 mb-10 w-full h-1/5 bg-gray-100 pt-10 m-5 rounded-t-2xl"
            >
              <div className="col-span-3 h-full w-full bg-transparent space-y-10 text-lg font-bold items-center justify-center text-center">
                {/* <h5>{profileName}</h5>
                <img src={image} alt="" className="h-30 w-30" />

                <h4>
                  {firstName} - {lastName}
                </h4><h5>{email}</h5>
                <h5> {phoneNo}</h5>  <p>
                  {verified}-
                  <span
                    className={`mx-2 ${
                      verified === "Yes" ? "text-lime-500" : "text-red-500"
                    }`}
                  >
                    {verified === "Yes" ? "v" : "x"}
                  </span>
                </p> */}
                <p
                  className={`mx-2 ${
                    status === "owner" ? "text-teal-500" : "text-amber-500"
                  }`}
                >
                  {" "}
                  {status === "owner" ? "Owner" : "Renter"}
                </p>
              </div>
              <div className="flex relative group p-5 col-span-2 h-full w-full border-none group-hover:rounded-full transform hover:duration-300 hover:scale-110 hover:ease-in hover:cursor-pointer transition duration-300 ease-out py-8 mb-15 object-cover">
                {userProfile?.image && (
                  <Link href="/">
                    <>
                      <Image
                        src={userProfile?.image}
                        className="rounded-2xl h-full w-full object-contain"
                        layout="responsive"
                        width={150}
                        height={150}
                        objectFit="contain"
                        alt=""
                      />
                    </>
                  </Link>
                )}
              </div>
            </div>
            <section className="hover:bg-gray-200 p-5 h-1/4 gap-x-8 flex overflow-x-scroll scroll-smooth scrollbar-hide rounded-2xl">
              {/* {cribs.map(({ images, caption, form, BR, BTH, price }) => (
                <div key={price} className="w-full shadow-lg rounded-2xl">
                  <Listing
                    key={price}
                    images={images[0]}
                    caption={caption}
                    form={form}
                    BR={BR}
                    BTH={BTH}
                    price={price}
                  />
                  <p className="text-4xl transition transform rotate-90 duration hover:cursor-pointer font-bold items-center justify-center text-center p-3 my-10">
                    {cribs.length > 4 ? "..." : null}
                  </p>
                </div>
              ))} */}
            </section>
            {userProfile ? (
              <div className="items-center justify-center">
                <button
                  className="button w-[300px] flex"
                  onClick={(e) => setAddListing((prev) => !prev)}
                >
                  <span className="hidden lg:block">Upload Listing</span>
                  <IoMdAdd className="text-4xl text-center font-extrabold hover:scale-150 hover:text-amber-500 transition hover:duration-200 hover:ease-out" />
                </button>
              </div>
            ) : (
              <div>
                <GoogleSignIn />
              </div>
            )}

            {addListing && (
              <div className="flex flex-col h-full w-full shadow-lg bg-gray-700/30 backdrop-blur-lg my-5 items-center justify-center">
                <p
                  onClick={() => setAddListing((prev) => !prev)}
                  className="flex pt-3 items-start justify-end text-white cursor-pointer"
                >
                  Close <span>x</span>
                </p>
                {/* <UserForm /> */}
              </div>
            )}
          </div>

          {/* <RecommendedProfiles /> */}
        </div>

        {/* 
        cribs and likes tabs */}

        {/* <Link href={`profile/${crib.author.id}`}>
          <Card />
        </Link> */}
        <div>
          <div className="flex space-x-4">
            <p
              onClick={() => setDisplayProfileCrib((prev) => !prev)}
              className={`text-lg font-medium border-b-2 border-t-2 border-x-2 rounded-xl text-gray-500 ${
                displayProfileCrib &&
                "border-teal-500 active:font-bold active:text-teal-500 active:shadow-md"
              } `}
            >
              {" "}
            </p>
            <p
              onClick={() => setDisplayProfileCrib((prev) => !prev)}
              className={`text-lg font-medium border-b-2 border-t-2 border-x-2 rounded-xl text-gray-500 ${
                !displayProfileCrib &&
                "border-teal-500 active:font-bold active:text-teal-500 active:shadow-md"
              } `}
            ></p>
          </div>
          <div>
            {/* {(displayProfileCrib || cribsList?.length) > 0 ? (
              <div> Cribs</div>
            ) : (
              <div>Liked</div>
            )} */}

            {/* {cribsList?.length > 0 ? cribsList.map((item) => (<Card />):(<NoResult text={`No ${displayProfileCrib} ? '' : 'liked' cribs`} />))} */}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Profile;

// export const getStaticProps = async ({
//   params,
// }: {
//   params: { id: string };
// }) => {
//   const { id } = params;
//   const { data } = await axios.get(`https://${BASE_URL}/api/profile/${id}`);
//   return { props: { profileDetail: data } };
// };

//
{
  /* <NOTE>

  each profile should have a calendar page so does each crib page
  profiles of two types renter and owner */
}
