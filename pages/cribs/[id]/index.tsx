import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { Dispatch, SetStateAction, useState, useEffect, useRef } from "react";
import { Carousel } from "react-responsive-carousel";
import "react-responsive-carousel/lib/styles/carousel.min.css";

import { GoogleSignIn, Reviews, Likes, VideoCard } from "../../../components";
import { useAuthStore } from "../../../store/authStore";
import axios from "axios";
import { BASE_URL } from "../../../utils";
import { Crib } from "../../../typings";

interface ICrib {
  handleReview: (e: React.FormEvent) => void;
  setReview: Dispatch<SetStateAction<string>>;
  setIsSendingReview: Dispatch<SetStateAction<boolean>>;
  review: string;
  isSendingReview: boolean;
  CribDetail: Crib;
}
// { CribDetail }: ICrib
const CribDetails: NextPage<ICrib> = () => {
  const router = useRouter();
  const { id } = router.query;
  const [chosenIndex, setChosenIndex] = useState<number>(0);
  const [isSendingReview, setIsSendingReview] =
    useState<SetStateAction<boolean>>(false);

  const [review, setReview] = useState<string>("");
  // const [crib, setCrib] = useState(CribDetail);
  const { userProfile }: any = useAuthStore();

  // const handleLike = async (like: boolean) => {
  //   if (userProfile) {
  //     const { data } = await axios.put(`${BASE_URL}/api/like`, {
  //       like,
  //       profileId: userProfile._id,
  //       cribId: crib._id,
  //     });

  //     setCrib({ ...crib, likes: data.likes });
  //   }
  // };

  // const handleReview = async (e: any) => {
  //   e.preventDefault();
  //   if (userProfile && review) {
  //     setIsSendingReview(true);
  //     const response = await axios.put(`${BASE_URL}/api/crib/${crib._id}`, {
  //       profileId: userProfile?._id,
  //       review,
  //     });
  //     setCrib({ ...crib, reviews: response.data.reviews });
  //     setIsSendingReview(false);
  //     setReview("");
  //   }
  // };

  // if (!crib) return null;

  return (
    <div className="items-center justify-center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-9xl mx-auto space-y-10">
        <div className="grid md:grid-cols-3">
          <div className="w-0 h-screen transition duration-300 hover:ease-out sm:hidden md:w-full lg:inline-flex md:bg-[url('/city.jpg')] md:text-white md:col-span-1 items-center justify-center text-2xl"></div>
          <div className="col-span-full lg:col-span-2 m-5 p-5">
            <h1 className="text-5xl items-center justify-center text-gray-500">
              Your Crib Details
            </h1>
            <div>
              <div className="space-y-5 p-3">
                {/* {!userProfile && <GoogleSignIn />} */}

                {/* <h2>{userProfile && crib?.author.profileName}</h2> */}
                <div className="flex gap-4 items-center justify-center lg:flex-row overflow-x-scroll scroll-smooth scrollbar-hide">
                  <Carousel
                    autoPlay
                    infiniteLoop
                    interval={4500}
                    showIndicators={true}
                    showThumbs={true}
                    showStatus={false}
                    axis="horizontal"
                    onChange={(i) => setChosenIndex(i)}
                  >
                    {["/city.jpg", "/autum.jpg", "/road.jpg"].map(
                      (item, index) => (
                        <div key={index} className="flex relative h-[300px]">
                          <img
                            src={item}
                            alt={`Image ${index}`}
                            className="w-full h-full object-contain"
                          />
                        </div>
                      )
                    )}
                  </Carousel>
                </div>
                <div className="mx-auto">
                  <VideoCard />
                </div>

                <div className="flex flex-wrap space-x-3 items-center justify-around my-3">
                  {" "}
                  {/* <p className="searchPtag">Bedrooms: {BR}</p>
                  <p className="searchPtag">Bathrooms: {BTH}</p>
                  <p className="searchPtag">
                    Max Guests Allowed: {maxGuestsAllowed}
                  </p>
                  <p className="searchPtag">Max No of Nights:{maxNoOfNights}</p>
                  <p className="searchPtag">Cost Per Night: {price}</p>
                  <p className="searchPtag">
                    Security Deposit:{securityDeposit}
                  </p>
                  <p className="searchPtag">Wheelchair Accessibility: </p>
                  <p className="searchPtag">Entrance: {entrance} </p>
                  <p className="searchPtag">Pet Policy: {pet}</p>
                  <p className="searchPtag"> Type of Property:{form}</p> */}
                </div>

                <p className="text-xl font-bold text-gray-500 my-5 p-3">
                  Full Description <br />
                  <span className="px-3 mx-3 text-lg text-teal-500"></span>
                </p>
              </div>
              {/* <div>
                {userProfile && (
                  <Likes
                    likes={crib.likes}
                    handleThumbsUp={() => handleLike(true)}
                    handleThumbsDown={() => handleLike(false)}
                  />
                )}
              </div> */}

              {/* inside reviews component all reviews is viewable by all but only those with a userprofile get to post */}
              {/* <div>
                <Reviews
                  isSendingReview={isSendingReview}
                  handleReview={handleReview}
                  review={review}
                  setReview={setReview}
                  reviews={crib.reviews}
                />
              </div> */}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default CribDetails;

// export const getStaticProps = async ({
//   params,
// }: {
//   params: { id: string };
// }) => {
//   const { id } = params;
//   const { data } = await axios.get(`https://localhost:3000/api/crib/${id}`);
//   return { props: { CribDetail: data } };
// };

//confirm from data returned if it is id or _id
